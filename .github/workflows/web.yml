name: Web Tests/Analysis

on:
  workflow_dispatch:
  push:
    branches:
      - 'develop'
      - 'main'
  pull_request:
    paths:
      - 'python/web/**'
      - 'python/common/**'
      - '.github/workflows/web.yml'
      - 'easyinstall.sh'
    types:
      - assigned
      - opened
      - synchronize
      - reopened

jobs:
  backend_checks:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: python
    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-python@v4
        with:
          python-version: 3.7.15
          cache: 'pip'

      - run: pip install -r web/requirements-dev.txt
        id: pip

      - run: black --check .

      - run: flake8 .
        if: success() || failure() && steps.pip.outcome == 'success'

  backend_tests:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: docker
    steps:
      - uses: actions/checkout@v3

      - name: Check DockerHub for existing backend image
        run: |
          export DOCKER_BACKEND_IMAGE="piscsi/backend-standalone:`git ls-files -s python .github/workflows/web.yml | git hash-object --stdin`"
          echo "DOCKER_BACKEND_IMAGE=${DOCKER_BACKEND_IMAGE}" >> $GITHUB_ENV
          docker pull --quiet ${DOCKER_BACKEND_IMAGE} || echo "DOCKER_BACKEND_NEEDS_PUSH=1" >> $GITHUB_ENV

      - name: Build and launch containers
        run: docker compose -f docker-compose.ci.yml up -d

      - name: Run test suite
        run: docker compose -f docker-compose.ci.yml run pytest -v

      - name: Check if DockerHub secrets defined
        run: if [[ $DOCKERHUB_USERNAME && $DOCKERHUB_TOKEN ]]; then echo "DOCKERHUB_SECRETS_DEFINED=1" >> $GITHUB_ENV; fi
        env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Login to DockerHub
        uses: docker/login-action@v2
        if: env.DOCKERHUB_SECRETS_DEFINED && env.DOCKER_BACKEND_NEEDS_PUSH
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Push backend image to DockerHub
        if: (success() || failure()) && env.DOCKERHUB_SECRETS_DEFINED && env.DOCKER_BACKEND_NEEDS_PUSH
        run: docker compose -f docker-compose.ci.yml push backend

      - name: Upload test artifacts
        if: success() || failure()
        uses: actions/upload-artifact@v3
        with:
          name: pytest-output.zip
          path: |
            docker/volumes/pytest/report.xml
            docker/volumes/pytest/pytest.log

      - name: Output container logs
        if: success() || failure()
        run: |
          docker compose -f docker-compose.ci.yml logs backend > backend.log
          docker compose -f docker-compose.ci.yml logs web > web.log
          docker compose -f docker-compose.ci.yml logs -t | sort -u -k 3 > combined.log

      - name: Upload backend log
        if: success() || failure()
        uses: actions/upload-artifact@v3
        with:
          name: backend.log
          path: docker/backend.log

      - name: Upload web log
        if: success() || failure()
        uses: actions/upload-artifact@v3
        with:
          name: web.log
          path: docker/web.log

      - name: Upload combined log
        if: success() || failure()
        uses: actions/upload-artifact@v3
        with:
          name: combined.log
          path: docker/combined.log

  frontend_checks:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: python/web
    steps:
    - uses: actions/checkout@v3

    - uses: actions/setup-node@v3
      with:
        node-version: 16
        cache: 'npm'
        cache-dependency-path: python/web/package-lock.json

    - run: npm ci
      id: npm

    - name: Stylelint
      run: |
        npx stylelint src/static/themes/modern/style.css
        npx stylelint src/static/themes/classic/style.css

    - name: Prettier
      run: |
        npx prettier --check src/static/themes/modern/style.css
        npx prettier --check src/static/themes/classic/style.css
      if: success() || failure() && steps.npm.outcome == 'success'

  sonarcloud:
    runs-on: ubuntu-22.04
    if: github.repository == 'PiSCSI/piscsi'
    env:
      SOURCES: python
      BUILD_WRAPPER_OUT_DIR: "$HOME/.build_wrapper_out" # Directory where build-wrapper output will be placed
      SONAR_SCANNER_VERSION: 5.0.1.3006
      SONAR_SERVER_URL: "https://sonarcloud.io"
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      SONAR_PROJECT_KEY: "akuker-PISCSI"
      SONAR_ORGANIZATION: "piscsi"
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Shallow clones should be disabled for a better relevancy of analysis

      - name: Set up JDK 17
        uses: actions/setup-java@v1
        with:
          java-version: 17

      - uses: actions/cache@v3
        name: Cache SonarCloud setup
        id: sonar-install-cache
        with:
          path: ~/.sonar
          key: sonar-with-build-wrapper-${{ env.SONAR_SCANNER_VERSION }}

      - name: Set up SonarCloud scanner
        if: steps.sonar-install-cache.outputs.cache-hit != 'true'
        env:
          SONAR_SCANNER_DOWNLOAD_URL: https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-${{ env.SONAR_SCANNER_VERSION }}-linux.zip
        run: |
          mkdir -p $HOME/.sonar
          curl -sSLo /tmp/sonar-scanner.zip ${{ env.SONAR_SCANNER_DOWNLOAD_URL }}
          unzip -o /tmp/sonar-scanner.zip -d $HOME/.sonar/

      - name: Set up SonarCloud build wrapper
        if: steps.sonar-install-cache.outputs.cache-hit != 'true'
        env:
          BUILD_WRAPPER_DOWNLOAD_URL: ${{ env.SONAR_SERVER_URL }}/static/cpp/build-wrapper-linux-x86.zip
        run: |
          curl -sSLo /tmp/build-wrapper-linux-x86.zip ${{ env.BUILD_WRAPPER_DOWNLOAD_URL }}
          unzip -o /tmp/build-wrapper-linux-x86.zip -d $HOME/.sonar/

      - name: Run sonar-scanner
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: >-
          $HOME/.sonar/sonar-scanner-${{ env.SONAR_SCANNER_VERSION }}-linux/bin/sonar-scanner
          --define sonar.host.url="${{ env.SONAR_SERVER_URL }}"
          --define sonar.projectKey=${{ env.SONAR_PROJECT_KEY }}
          --define sonar.organization=${{ env.SONAR_ORGANIZATION }}
          --define sonar.cfamily.build-wrapper-output="${{ env.BUILD_WRAPPER_OUT_DIR }}"
          --define sonar.cfamily.gcov.reportsPath=.
          --define sonar.inclusions="python/**"
          --define sonar.python.version=3.9,3.11
