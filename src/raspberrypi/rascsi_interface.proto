//
// Each rascsi remote interface message is preceded by a little endian 32 bit header,
// which contains the protobuf message size.
//

syntax = "proto3";

package rascsi_interface;

// The available device types
enum PbDeviceType {
    UNDEFINED = 0;
    // Non-removable SASI drive
    SAHD = 1;
    // Non-removable SCSI drive
    SCHD = 2;
    // Removable SCSI drive
    SCRM = 3;
    // Magnoto-Optical drive
    SCMO = 4;
    // CD-ROM drive
    SCCD = 5;
    // Network bridge
    SCBR = 6;
    // DaynaPort network adapter
    SCDP = 7;
}

// rascsi remote operations. PbResult is returned, except for SERVER_INFO and DEVICE_INFO.
enum PbOperation {
    NONE = 0;
    // Gets the server information. Returns PbServerInfo.
    SERVER_INFO = 1;
    // Gets information on a list of devices. Returns PbDevices.
    // If a device does not exist the device type returned for the respective ID and unit is UNDEFINED.
    DEVICE_INFO = 2;
    // Set the default folder for image files, PbCommand.params contains the folder name
    DEFAULT_FOLDER = 3;
    // Set server log level, PbCommand.params contains the log level
    LOG_LEVEL = 4;
    // Attach new device
    ATTACH = 5;
    // Detach device
    DETACH = 6;
    // Detach all devices, does not require a device list
    DETACH_ALL = 7;
    // Insert medium
    INSERT = 8;
    // Eject medium
    EJECT = 9;
    // Write-protect medium (not possible for read-only media)
    PROTECT = 10;
    // Make medium writable (not possible for read-only media)
    UNPROTECT = 11;
    // IDs blocked from being used, usually the ID of the initiator (computer) in the SCSI chain.
    // The command params field contains the full list of IDs to reserve, or is empty in order to allow all IDs.
    RESERVE = 12;
}

// The properties supported by a device, helping clients to offer a good user experience
message PbDeviceProperties {
     // Read-only media (e.g. CD-ROMs) are not protectable but permanently read-only
    bool read_only = 1;
    // Medium can be write-protected
    bool protectable = 2;
    // Medium can be removed
    bool removable = 3;
    // Medium can be locked
    bool lockable = 4;
    // Device supports image file as a parameter
    bool supports_file = 5;
    // Device supports parameters other than a filename
    bool supports_params = 6;
    // The number of supported LUNs, at least 1 (for LUN 0)
    uint32 luns = 7;
    // Unordered list of supported block sizes in bytes, empty if the block size is not configurable
    repeated uint32 block_sizes = 8;
    // Unordered list of supported media capacities in bytes, empty if there is no capacity restriction
    repeated uint64 capacities = 9;
}

// The status of a device
message PbDeviceStatus {
    // Medium is write-protected
    bool protected = 1;
    // Medium is removed
    bool removed = 2;
    // Medium is locked
    bool locked = 3;
}

// Device properties by device type
message PbDeviceTypeProperties {
    PbDeviceType type = 1;
    PbDeviceProperties properties = 2;
}

// The image file data
message PbImageFile {
    string name = 1;
    bool read_only = 2;
    int64 size = 3;
}

// The device definition, sent from the client to the server
message PbDeviceDefinition {
    int32 id = 1;
    int32 unit = 2;
    PbDeviceType type = 3;
    // Optional device specific parameters, e.g. the name of an image file
    repeated string params = 4;
    // The optional block size in bytes per sector, must be one of the supported block sizes for SASI/SCSI
    int32 block_size = 5;
    // The device name components
    string vendor = 6;
    string product = 7;
    string revision = 8;
    // Create a write-protected device
    bool protected = 9;
}

// The device data, sent from the server to the client
message PbDevice {
    int32 id = 1;
    int32 unit = 2;
    PbDeviceType type = 3;
    PbDeviceProperties properties = 4;
    PbDeviceStatus status = 5;
    PbImageFile file = 6;
    string vendor = 7;
    string product = 8;
    string revision = 9;
    int32 block_size = 10;
}

message PbDevices {
    repeated PbDevice devices = 1;
}

// Commands rascsi can execute and their parameters
message PbCommand {
    PbOperation operation = 1;
    // The non-empty list of devices for this command
    repeated PbDeviceDefinition devices = 2;
    // The optional parameters depending on the operation, e.g. a filename, or a network interface list
    repeated string params = 3;
}

// The result of a command. Note that the SERVER_INFO command has a special result.
message PbResult {
    // false means that an error occurred
    bool status = 1;
    // An error message or an information message, depending on status
    string msg = 2;
}

// The rascsi server information
message PbServerInfo {
    // The rascsi server version
    uint32 major_version = 1;
    uint32 minor_version = 2;
    // < 0 for a development version, = 0 if there is no patch yet
    int32 patch_version = 3;
    // List of available log levels, ordered by increasing by severity
    repeated string log_levels = 4;
    string current_log_level = 5;
    string default_image_folder = 6;
    // Supported device types and their properties
    repeated PbDeviceTypeProperties types_properties = 7;
    // Unordered list of files in the default image folder
    repeated PbImageFile image_files = 8;
    // The attached devices
    repeated PbDevice devices = 9;
    // The unsorted list of reserved IDs
    repeated uint32 reserved_ids = 10;
}
