//
// Each rascsi remote interface message is preceded by a little endian 32 bit header,
// which contains the protobuf message size.
//

syntax = "proto3";

package rascsi_interface;

// The available device types
enum PbDeviceType {
    UNDEFINED = 0;
    // Non-removable SASI drive
    SAHD = 1;
    // Non-removable SCSI drive
    SCHD = 2;
    // Removable SCSI drive
    SCRM = 3;
    // Magnoto-Optical drive
    SCMO = 4;
    // CD-ROM drive
    SCCD = 5;
    // Network bridge
    SCBR = 6;
    // DaynaPort network adapter
    SCDP = 7;
}

// rascsi remote operations
enum PbOperation {
    NONE = 0;
    // Returns the server information
    SERVER_INFO = 1;
    // Set the default folder for image files, PbCommand.params contains the folder name
    DEFAULT_FOLDER = 2;
    // Set server log level, PbCommand.params contains the log level
    LOG_LEVEL = 3;
    // Attach new device
    ATTACH = 4;
    // Detach device. Detach all devices if PbCommand.params == "all". In this case ID and unit are ignored.
    DETACH = 5;
    // Insert media
    INSERT = 6;
    // Eject media
    EJECT = 7;
    // Write-protect media (not possible for read-only media)
    PROTECT = 8;
    // Make media writable (not possible for read-only media)
    UNPROTECT = 9;
}

// The properties supported by a device
message PbDeviceProperties {
     // Read-only medium (e.g. CD-ROMs) are not protectable but permanently read-only
    bool read_only = 1;
    // Medium can be write-protected
    bool protectable = 2;
    // Medium can be removed
    bool removable = 3;
    // Medium can be locked
    bool lockable = 4;
    // Device supports image file as a parameter
    bool supports_file = 5;
    // Device supports parameters other than a filename
    bool supports_params = 6;
    // Unordered list of supported block sizes in bytes, empty if the block size is not configurable
    repeated uint32 block_sizes = 7;
    // Unordered list of supported media capacities in bytes, empty if there is no capacity restriction
    repeated uint64 capacities = 8;
}

// The status of a device
message PbDeviceStatus {
    // Medium is write-protected
    bool protected = 1;
    // Medium is removed
    bool removed = 2;
    // Medium is locked
    bool locked = 3;
}

// Device properties by device type
message PbDeviceTypeProperties {
    PbDeviceType type = 1;
    PbDeviceProperties properties = 2;
}

// The image file data
message PbImageFile {
    string name = 1;
    bool read_only = 2;
    int64 size = 3;
}

// The device definition, sent from the client to the server
message PbDeviceDefinition {
    int32 id = 1;
    int32 unit = 2;
    PbDeviceType type = 3;
    // Optional device specific parameter, e.g. the name of an image file
    string params = 4;
    // The optional block size in bytes per sector, must be one of the supported block sizes for SASI/SCSI
    int32 block_size = 5;
    // The device name components
    string vendor = 6;
    string product = 7;
    string revision = 8;
    // Create a write-protected device
    bool protected = 9;
}

message PbDeviceDefinitions {
    repeated PbDeviceDefinition devices = 1;
}

// The device data, sent from the server to the client
message PbDevice {
    int32 id = 1;
    int32 unit = 2;
    PbDeviceType type = 3;
    PbDeviceProperties properties = 4;
    PbDeviceStatus status = 5;
    PbImageFile file = 6;
    string vendor = 7;
    string product = 8;
    string revision = 9;
    int32 block_size = 10;
}

message PbDevices {
    repeated PbDevice devices = 1;
}

// Commands rascsi can execute and their parameters
message PbCommand {
    PbOperation operation = 1;
    // The optional device list
    PbDeviceDefinitions devices = 2;
    // The optional parameters, depending on the operation
    string params = 3;
}

// The result of a command. Note that the SERVER_INFO command has a special result.
message PbResult {
    // false means that an error occurred
    bool status = 1;
    // An error message or an information message, depending on status
    string msg = 2;
}

// The rascsi server information
message PbServerInfo {
    string rascsi_version = 1;
    // List of available log levels, ordered by increasing by severity
    repeated string log_levels = 2;
    string current_log_level = 3;
    string default_image_folder = 4;
    // Supported device types and their properties
    repeated PbDeviceTypeProperties types_properties = 5;
    // Unordered list of files in the default image folder
    repeated PbImageFile image_files = 6;
    // The attached devices
    PbDevices devices = 7;
}
